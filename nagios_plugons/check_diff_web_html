#!/bin/bash

# 
# Comparison of differences in web content changes
# v1.0
# 
# https://github.com/jasoncheng7115/it-scripts
# https://blog.jason.tools
# 
# jason@jason.tools
# 2023/12/26

# Nagios states
STATE_OK=0
STATE_WARNING=1
STATE_CRITICAL=2
STATE_UNKNOWN=3

# Default allowed difference
allowed_diff=-1

# Function to convert file size to human readable format
function filesize {
    local size=$1
    if ((size > 1024**3)); then
        echo $(bc <<< "scale=2; $size / (1024^3)")"GB"
    elif ((size > 1024**2)); then
        echo $(bc <<< "scale=2; $size / (1024^2)")"MB"
    elif ((size > 1024)); then
        echo $(bc <<< "scale=2; $size / 1024")"KB"
    else
        echo ${size}"B"
    fi
}

# Function to display help message
function display_help {
  echo "Usage: $0 [-H url] [-S] [-d num] [-h] [-k]"
  echo "  -H: URL to fetch. The URL should be in the format 'www.example.com'"
  echo "  -S: Use HTTPS"
  echo "  -d: Allowed difference in character count"
  echo "  -h: Show this help message and exit"
  echo "  -k: Ignore HTTPS certificate check"
  echo ""
  echo "This script fetches the content of a URL and compares it with the previous content."
  echo "If the difference in character count is greater than the allowed difference, it outputs a CRITICAL status."
  echo "If the difference is within the allowed difference, or if the content is unchanged, it outputs an OK status."
  echo "If this is the first time the script is run, there is no previous content to compare with, so it also outputs an OK status."
  exit $STATE_OK
}

# Parse command line arguments
while getopts "H:Sd:hk" opt; do
  case ${opt} in
    H )
      url=$OPTARG
      ;;
    S )
      protocol="https"
      ;;
    d )
      allowed_diff=$OPTARG
      ;;
    h )
      display_help
      ;;
    k )
      ignore_cert_check="-k"
      ;;
    \? )
      echo "Invalid option: $OPTARG" 1>&2
      exit $STATE_UNKNOWN
      ;;
    : )
      display_help
      ;;
  esac
done
shift $((OPTIND -1))

# Check if URL is provided
if [ -z "$url" ]; then
  display_help
fi

# Default to HTTP if not specified
protocol=${protocol:-http}

# Hash the URL for the filename
filename=$(echo -n "$url" | md5sum | awk '{print $1}')
filepath="/tmp/$filename"

# Fetch the URL content
if ! curl -s $ignore_cert_check -o "$filepath" "$protocol://$url"; then
  echo "CRITICAL: Failed to fetch URL content"
  exit $STATE_CRITICAL
fi

# Compare with previous content and output Nagios status
exit_status=$STATE_OK
diff_output=""
if [ -f "$filepath.previous" ]; then
  # Calculate the difference in character count
  char_diff=$(expr $(wc -c <"$filepath") - $(wc -c <"$filepath.previous"))
  if [ $char_diff -eq 0 ]; then
    echo "OK: Content is unchanged (File size: $(filesize $(wc -c <"$filepath")))"
  else
    # Get the difference in content
    diff_output=$(diff "$filepath" "$filepath.previous" | tr -d '\n' | head -c 12)
    if [ ${#diff_output} -gt 12 ]; then
      diff_output="${diff_output}..."
    fi
    if [ $allowed_diff -ge 0 -a $char_diff -le $allowed_diff ]; then
      echo "OK: Content is within allowed difference (Difference text is \"$diff_output\"...) (File size: $(filesize $(wc -c <"$filepath")), Previous file size: $(filesize $(wc -c <"$filepath.previous")))"
    else
      echo "CRITICAL: Content has changed. Difference in character count: $char_diff (Difference text is \"$diff_output\"...) (File size: $(filesize $(wc -c <"$filepath")), Previous file size: $(filesize $(wc -c <"$filepath.previous")))"
      exit_status=$STATE_CRITICAL
    fi
  fi
else
  echo "OK: First time execution, no previous content to compare with (File size: $(filesize $(wc -c <"$filepath")))"
fi

# Check if the target file exists, if so, delete it
if [ -f "$filepath.previous" ]; then
  if ! rm "$filepath.previous"; then
    echo "ERROR: Failed to remove previous file"
    exit $STATE_UNKNOWN
  fi
fi

# Rename the current file to .previous for next time
mv "$filepath" "$filepath.previous"

exit $exit_status
